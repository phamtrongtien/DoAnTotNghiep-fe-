import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Row, Col, Card, Typography, Button, message } from 'antd';
import './style.css';
import { useLocation } from 'react-router-dom';
import { orderContant } from '../../Contant';
import { resetOrder } from '../../redux/slices/orderSlice';
import StepComponent from '../../components/StepComponent/Stepcomponent';

const { Title, Text } = Typography;

const PaySuccessPage = () => {
    const order = useSelector((state) => state.order);
    const location = useLocation();
    const { state } = location;

    const [isRendered, setIsRendered] = useState(false); // Tr·∫°ng th√°i theo d√µi render
    const [orderData, setOrderData] = useState(null); // State m·ªõi ƒë·ªÉ l∆∞u d·ªØ li·ªáu ƒë∆°n h√†ng
    const dispatch = useDispatch();

    // T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
    const totalPrice = order.orderItems.reduce(
        (total, item) => total + item.price * item.amount,
        0 + (state?.shippingPrice || 0)
    );
    const tong = totalPrice;
    // L∆∞u d·ªØ li·ªáu c·ªßa state v√†o state m·ªõi ƒë·ªÉ render
    useEffect(() => {
        if (state) {
            setOrderData({
                totalPrice: tong,
                items: state.order,
                paymentMethod: state.paymentMethod,
                shippingMethod: state.shippingMethod,
                shippingPrice: state.shippingPrice,
            });
        }
    }, []);

    // ƒê√°nh d·∫•u tr·∫°ng th√°i render sau khi component ƒë∆∞·ª£c hi·ªÉn th·ªã
    useEffect(() => {
        setIsRendered(true);
    }, []);

    useEffect(() => {
        if (isRendered && order.orderItems.length > 0) {
            message.success('ƒë√£ th√†nh c√¥ng');
            const timer = setTimeout(() => {
                dispatch(resetOrder());
            }, 1000); // Th·ªùi gian tr√¨ ho√£n l√† 1 gi√¢y

            // Cleanup function ƒë·ªÉ h·ªßy b·ªè setTimeout n·∫øu component b·ªã unmount tr∆∞·ªõc khi h·∫øt th·ªùi gian
            return () => clearTimeout(timer);
        }
    }, [isRendered, order, dispatch]);
    const items =
        [
            {
                title: 'ƒê·∫∑t h√†ng',
                description: '',
            },
            {
                title: 'ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n',
                description: '',
            },
            {
                title: 'Thanh to√°n th√†nh c√¥ng',
                description: '',
            },
        ];
    return (
        <div className="pay-success-page">
            <div>
                <StepComponent current={3} items={items} />
            </div>
            <Title level={2} className="page-title">Thanh to√°n th√†nh c√¥ng üéâ</Title>
            <Row justify="center" align="middle" className="success-container">
                <Col xs={24} md={16}>
                    <Card className="success-card">
                        <Title level={4}>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! ‚ù§Ô∏è</Title>
                        <Text>
                            ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω s·ªõm x·ª≠ l√Ω ƒë∆°n h√†ng v√† giao h√†ng ƒë·∫øn b·∫°n.
                        </Text>
                        {orderData && (
                            <div className="order-summary">
                                <Text strong>S·ªë l∆∞·ª£ng s·∫£n ph·∫©m: </Text>
                                <Text>{orderData.items.length} s·∫£n ph·∫©m</Text>
                                <br />
                                <Text strong>Ph∆∞∆°ng th·ª©c thanh to√°n: </Text>
                                <Text>{orderContant.paymentMethod[orderData.paymentMethod]}</Text>
                                <br />
                                <Text strong>Ph∆∞∆°ng th·ª©c giao h√†ng: </Text>
                                <Text>{orderContant.shippingMethod[orderData.shippingMethod]}</Text>
                                <br />
                                <Text strong>Ph√≠ v·∫≠n chuy·ªÉn: </Text>
                                <Text>{orderData.shippingPrice || 0} ƒë</Text>
                                <br />
                                <Text strong>T·ªïng s·ªë ti·ªÅn thanh to√°n: </Text>
                                <Text>{orderData.totalPrice} ƒë</Text>
                                <br />
                                <Title level={5}>Danh s√°ch s·∫£n ph·∫©m:</Title>
                                <Row gutter={[16, 16]} className="product-list">
                                    {orderData.items.map((item, index) => (
                                        <Col xs={24} sm={12} md={8} key={index}>
                                            <Card
                                                hoverable
                                                cover={<img alt={item.name} src={item.image} className="product-image" />}
                                                className="product-card"
                                            >
                                                <Card.Meta title={item.name} description={`${item.price.toString()} VNƒê      S·ªë l∆∞·ª£ng: ${item.amount} `} />
                                            </Card>
                                        </Col>
                                    ))}
                                </Row>
                            </div>
                        )}
                        <Button type="primary" className="back-to-home-button" href="/">
                            <span style={{ color: 'white' }}>V·ªÅ trang ch·ªß</span>
                        </Button>
                    </Card>
                </Col>
            </Row>
        </div>
    );
};

export default PaySuccessPage;
